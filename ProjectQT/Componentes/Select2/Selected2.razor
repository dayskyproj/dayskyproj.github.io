@using ProjectQT.Componentes.Sweetalert2
@using ProjectQT.Data
@inject IJSRuntime JSRuntime

<select class="select2 form-control-plaintext @ClaseSelect"
        lang="es" id="@Id" 
        placeholder >

    @if (ListaMostrar.Count == 0)
    {
         <option hidden value="">No se ha añadido ninguna información</option>
    }
    else
    {
        <option hidden value="">@PlaceHolderActual</option>

        @foreach (var item in ListaMostrar)
        {   
            <option  value="@item.Valor"> @item.Descripcion </option> 
        }
    }
    
</select>

@code{

    [Parameter]
    public List<OpcionesSelect> OpcionesSelect { get; set; } = new();
    public List<OpcionesSelect> ListaMostrar { get; set; } = new();


    [Parameter]
    public string ValorPorDefecto { get; set; }
    private string ValorInicial { get; set; } = "";


    [Parameter]
    public string ClaseSelect { get; set; } = "";
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public EventCallback<string> EnviarOpcion { get; set; }

    [Parameter]
    public bool Activar { get; set; } = true;
    private bool ActivarActual { get; set; } = true;

    [Parameter]
    public string PlaceHolder { get; set; } = "Seleccione una opción";
    private string PlaceHolderActual { get; set; } = "Seleccione una opción";


    [Parameter]
    public bool OcultarSelect { get; set; } = false;
    public bool OcultarSelectActual { get; set; } = false;

    [Parameter]
    public string IdModal { get; set; } = "";

    protected override void OnInitialized()
    {

        ListaMostrar = OpcionesSelect;
        ValorInicial = ValorPorDefecto;
        PlaceHolderActual = PlaceHolder;
        OcultarSelect = OcultarSelectActual;

    }

    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            if (string.IsNullOrEmpty(Id))
            {
                await JSRuntime.MostrarMensaje("Error", "El id en los selects son obligatorios", Sweetalert2.TipoSweetalert2.error);
                throw new Exception("El id en los selects son obligatorios");
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("select2Blazor", DotNetObjectReference.Create(this), "OnSelectedValue", $"#{Id}", !Activar, ValorPorDefecto, IdModal);

                if (OcultarSelect)
                {
                    await JSRuntime.InvokeVoidAsync("select2Ocultar", $"#{Id}", OcultarSelect, ValorPorDefecto);

                }
            }

        }

        if (!OpcionesSelect.SequenceEqual(ListaMostrar) || Activar != ActivarActual || PlaceHolderActual != PlaceHolder)
        {
            PlaceHolderActual = PlaceHolder;
            ActivarActual = Activar;
            ListaMostrar = OpcionesSelect;
            await JSRuntime.InvokeVoidAsync("select2ActualizarOptions", $"#{Id}", !Activar, ValorPorDefecto, IdModal);
            StateHasChanged();
        }

        if (OcultarSelect != OcultarSelectActual)
        {
            OcultarSelectActual = OcultarSelect;
            await JSRuntime.InvokeVoidAsync("select2Ocultar", $"#{Id}", OcultarSelect, ValorPorDefecto);
        }

        if (ValorPorDefecto != ValorInicial)
        {

            ValorInicial = ValorPorDefecto;
            await JSRuntime.InvokeVoidAsync("select2ActualizarDefect", $"#{Id}", ValorInicial);

        }
    }


    [JSInvokable]
    public async Task OnSelectedValue(string val)
    {
        ValorPorDefecto = val;
        await EnviarOpcion.InvokeAsync(val);
        StateHasChanged();
    }     

    
}





